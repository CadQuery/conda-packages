parameters:
  name: 'Build job'  
  vmImage: 'Ubuntu-16.04'
  py_maj: '3'
  py_min: '6'

jobs:
- job: ${{ parameters.name }}_oce_${{ parameters.py_maj }}_${{ parameters.py_min }}
  timeoutInMinutes: 240
  
  pool: 
    vmImage: ${{ parameters.vmImage }}
  
  steps:
  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: False
      updateConda: True
      packageSpecs: conda-build conda-verify libarchive python=${{ parameters.py_maj }}.${{ parameters.py_min }} anaconda-client
      installOptions: --channel conda-forge
  
  - bash: conda config --set anaconda_upload yes && conda info && conda list
    displayName: 'Conda config and info'
  
  - bash: |
      cd oce-0.18.3 && \
      conda build --token $TOKEN --user cadquery -c conda-forge -c cadquery . && \
      cd ..
    displayName: 'OCE'
    failOnStderr: false
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    env:
      TOKEN: $(anaconda.TOKEN)
      
  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 && set CC=cl && set CXX=cl && ^
      cd oce-0.18.3 && ^
      conda build --token %TOKEN% --user cadquery -c conda-forge -c cadquery . && ^
      cd ..
    displayName: 'OCE - Windows specific'
    failOnStderr: false
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    env:
      TOKEN: $(anaconda.TOKEN)

- job: ${{ parameters.name }}_pythonocc_${{ parameters.py_maj }}_${{ parameters.py_min }}
  timeoutInMinutes: 240
  
  pool: 
    vmImage: ${{ parameters.vmImage }}
    
  steps:
  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: False
      updateConda: True
      packageSpecs: conda-build conda-verify libarchive python=${{ parameters.py_maj }}.${{ parameters.py_min }} anaconda-client
      installOptions: --channel conda-forge
  
  - bash: conda config --set anaconda_upload yes && conda info && conda list
    displayName: 'Conda config and info'
       
  - bash: |
      cd pythonocc && \
      conda build --token $TOKEN --user cadquery -c cadquery -c conda-forge . && \
      cd ..
    displayName: 'PythonOCC'
    failOnStderr: false
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    env:
      TOKEN: $(anaconda.TOKEN)
      
  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 && set CC=cl && set CXX=cl  && ^
      cd pythonocc && ^
      conda build --token %TOKEN% --user cadquery -c cadquery -c conda-forge . && ^
      cd ..
    displayName: 'PythonOCC - Windows specific'
    failOnStderr: false
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    env:
      TOKEN: $(anaconda.TOKEN)

- job: ${{ parameters.name }}_freeimageplus_${{ parameters.py_maj }}_${{ parameters.py_min }}
  timeoutInMinutes: 240
  
  pool: 
    vmImage: ${{ parameters.vmImage }}
    
  steps:
  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: False
      updateConda: True
      packageSpecs: conda-build conda-verify libarchive python=${{ parameters.py_maj }}.${{ parameters.py_min }} anaconda-client
      installOptions: --channel conda-forge
  
  - bash: conda config --set anaconda_upload yes && conda info && conda list
    displayName: 'Conda config and info'
       
  - bash: |
      cd freeimageplus && \
      conda build --token $TOKEN --user cadquery -c cadquery -c conda-forge . && \
      cd ..
    displayName: 'FreeImagePlus'
    failOnStderr: false
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    env:
      TOKEN: $(anaconda.TOKEN)
      
  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 && set CC=cl && set CXX=cl && ^
      cd freeimageplus && ^
      conda build --token %TOKEN% --user cadquery -c cadquery -c conda-forge . && ^
      cd ..
    displayName: 'FreeImagePlus - Windows specific'
    failOnStderr: false
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    env:
      TOKEN: $(anaconda.TOKEN)
